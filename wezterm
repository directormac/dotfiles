------------------------------------------------------
--               Wezterm configuration
------------------------------------------------------
local term = require("wezterm")
local act = term.action
local gui = term.gui
local mux = term.mux
-- Get ssh and wsl defaults
local wsl_domains = term.default_wsl_domains()
local ssh_domains = term.default_ssh_domains()
local launch_menu = {}
local config = {}

-- For windows host custom configuration
if term.target_triple == "x86_64-pc-windows-msvc" then
	-- config.win32_system_backdrop = "Acrylic"
	config.default_prog = { "C:\\Program Files\\PowerShell\\7\\pwsh.exe" }
	for _, domain in ipairs(wsl_domains) do
		domain.default_cwd = "~"
	end
end

-- For linux host custom configuration
if term.target_triple == "x86_64-unknown-linux-gnu" then
end

-- Load SSH Domains from ~/.ssh/config
for _, domain in ipairs(ssh_domains) do
	domain.assume_shell = "Posix"
end

--Startup settings
term.on("gui-startup", function(cmd)
	local tab, pane, window = term.mux.spawn_window(cmd or {})
	window:gui_window():set_inner_size(1440, 900)
	window:gui_window():set_position(350, 80)
	-- window:maximize()
	-- pane:split({ direction = "Bottom", size = 0.25 })
end)

term.on("mux-startup", function()
	local tab, pane, window = mux.spawn_window({})
	-- pane:split({ direction = "Bottom", size = 0.25 })
end)

---- Appearance
-- config.front_end = "OpenGL"

config.status_update_interval = 1000
config.color_scheme = "Catppuccin Mocha"

config.animation_fps = 240
config.max_fps = 240

-- config.initial_cols = 120
-- config.initial_rows = 30
config.font = term.font({
	family = "FiraCode Nerd Font",
	weight = "Regular",
	stretch = "Normal",
	style = "Normal",
	harfbuzz_features = { "calt=1", "clig=1", "liga=1" },
	-- scale = 1.0
})
config.font_size = 14
config.window_decorations = "RESIZE"
-- config.text_background_opacity = 0.3
-- config.window_background_opacity = 0.618
config.window_frame = {
	border_left_width = "0.25cell",
	border_right_width = "0.25cell",
	border_bottom_height = "0.125cell",
	border_top_height = "0.125cell",
	border_left_color = "#11111b",
	border_right_color = "#11111b",
	border_bottom_color = "#11111b",
	border_top_color = "#11111b",
	font_size = 16,
}
config.enable_scroll_bar = false
-- config.default_cursor_style = "BlinkingBlock"
-- config.cursor_blink_rate = 333
config.inactive_pane_hsb = { saturation = 1.0, brightness = 0.5 }
config.window_padding = { left = 0, right = 0, top = 0, bottom = 0 }
config.colors = {
	background = "#11111b",
	tab_bar = {
		background = "#11111b",
		active_tab = {
			bg_color = "#11111b",
			fg_color = "#181825",
			intensity = "Bold",
		},
		inactive_tab = {
			bg_color = "#11111b",
			fg_color = "#181825",
		},
	},
}

----- Misc
config.adjust_window_size_when_changing_font_size = false
config.audible_bell = "Disabled"
config.exit_behavior = "Close"
config.window_close_confirmation = "NeverPrompt"
config.scrollback_lines = 50000
config.tab_max_width = 9999
config.hide_tab_bar_if_only_one_tab = false
config.tab_bar_at_bottom = false
config.use_fancy_tab_bar = false
config.show_new_tab_button_in_tab_bar = false

config.disable_default_key_bindings = true
config.leader = { key = "a", mods = "CTRL", timeout_milliseconds = 1000 }

local fuzzy_commands = act.ShowLauncherArgs({ title = "  Fuzzy Commands", flags = "FUZZY|KEY_ASSIGNMENTS|COMMANDS" })
local fuzzy_domains = act.ShowLauncherArgs({ title = "  Find Domains", flags = "FUZZY|DOMAINS" })
local fuzzy_tabs = act.ShowLauncherArgs({ title = " Tabs", flags = "FUZZY|TABS|WORKSPACES" })
config.keys = {
	{ key = "F10", action = fuzzy_domains },
	{ key = "F11", action = act.ToggleFullScreen },
	{ key = "F12", action = fuzzy_commands },
	{ key = "F9", action = fuzzy_tabs },

	-- { key = "r", mods = "LEADER", action = "ReloadConfiguration" },
	{ key = "i", mods = "LEADER", action = fuzzy_tabs },
	{ key = "o", mods = "LEADER", action = fuzzy_domains },
	{ key = "p", mods = "LEADER", action = fuzzy_commands },
	{ key = "n", mods = "LEADER", action = act.SwitchToWorkspace },
	{ key = "-", mods = "LEADER", action = act({ SplitVertical = { domain = "CurrentPaneDomain" } }) },
	{ key = "\\", mods = "LEADER", action = act({ SplitHorizontal = { domain = "CurrentPaneDomain" } }) },
	{ key = "z", mods = "LEADER", action = "TogglePaneZoomState" },
	{ key = "c", mods = "LEADER", action = act({ SpawnTab = "CurrentPaneDomain" }) },
	{ key = "x", mods = "LEADER", action = act.CloseCurrentPane({ confirm = false }) },
	{ key = "w", mods = "LEADER", action = act.CloseCurrentTab({ confirm = false }) },
	{ key = "0", mods = "LEADER", action = act.ResetFontAndWindowSize },
	{ key = "y", mods = "LEADER", action = "ActivateCopyMode" },
	{ key = "s", mods = "LEADER", action = act({ Search = { CaseInSensitiveString = "" } }) },
	{ key = "f", mods = "LEADER", action = "QuickSelect" },
	{ key = "q", mods = "LEADER", action = act.PaneSelect },
	{ key = "h", mods = "LEADER", action = act({ ActivatePaneDirection = "Left" }) },
	{ key = "j", mods = "LEADER", action = act({ ActivatePaneDirection = "Down" }) },
	{ key = "k", mods = "LEADER", action = act({ ActivatePaneDirection = "Up" }) },
	{ key = "l", mods = "LEADER", action = act({ ActivatePaneDirection = "Right" }) },

	{ key = ">", mods = "LEADER|SHIFT", action = act.SwitchWorkspaceRelative(0) },
	{ key = "<", mods = "LEADER|SHIFT", action = act.SwitchWorkspaceRelative(-2) },
	{ key = "H", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Left", 5 } }) },
	{ key = "J", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Down", 5 } }) },
	{ key = "K", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Up", 5 } }) },
	{ key = "L", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Right", 5 } }) },

	{ key = "-", mods = "LEADER|CTRL", action = act.DecreaseFontSize },
	{ key = "=", mods = "LEADER|CTRL", action = act.IncreaseFontSize },
	{ key = "Tab", mods = "CTRL", action = act({ ActivateTabRelative = 1 }) },
	{ key = "1", mods = "ALT", action = act({ ActivateTab = 0 }) },
	{ key = "2", mods = "ALT", action = act({ ActivateTab = 1 }) },
	{ key = "3", mods = "ALT", action = act({ ActivateTab = 2 }) },
	{ key = "4", mods = "ALT", action = act({ ActivateTab = 3 }) },
	{ key = "5", mods = "ALT", action = act({ ActivateTab = 4 }) },
	{ key = "6", mods = "ALT", action = act({ ActivateTab = 5 }) },
	{ key = "7", mods = "ALT", action = act({ ActivateTab = 6 }) },
	{ key = "8", mods = "ALT", action = act({ ActivateTab = 7 }) },
	{ key = "9", mods = "ALT", action = act({ ActivateTab = 8 }) },
	{ key = "c", mods = "CTRL|SHIFT", action = act({ CopyTo = "ClipboardAndPrimarySelection" }) },
	{ key = "v", mods = "CTRL|SHIFT", action = act({ PasteFrom = "Clipboard" }) },
}

-- copy_mode
local copy_mode = gui.default_key_tables().copy_mode
table.insert(copy_mode, { key = "h", mods = "SHIFT", action = act.CopyMode("MoveToStartOfLineContent") })
table.insert(copy_mode, { key = "l", mods = "SHIFT", action = act.CopyMode("MoveToEndOfLineContent") })
table.insert(copy_mode, {
	key = "y",
	mods = "NONE",
	action = act.Multiple({ act.CopyTo("PrimarySelection"), act.ClearSelection, act.CopyMode("ClearSelectionMode") }),
})
-- search_mode
local search_mode = gui.default_key_tables().search_mode
table.insert(search_mode, { key = "c", mods = "CTRL", action = act.CopyMode("Close") })

-- copy_mode <=> search_mode
table.insert(copy_mode, { key = "i", mods = "NONE", action = act.Search({ CaseInSensitiveString = "" }) })
table.insert(search_mode, { key = "Enter", mods = "SHIFT", action = act.ActivateCopyMode })

config.key_tables = {
	copy_mode = copy_mode,
	search_mode = search_mode,
	super = {
		{ key = "`", mods = "CTRL", action = "PopKeyTable" },
		{ key = "Space", mods = "NONE", action = act.Search({ CaseInSensitiveString = "" }) },
		{ key = "n", mods = "CTRL", action = act.CopyMode("NextMatch") },
		{ key = "p", mods = "CTRL", action = act.CopyMode("PriorMatch") },
		{ key = "r", mods = "CTRL", action = act.CopyMode("CycleMatchType") },
		{ key = "PageUp", mods = "NONE", action = act.CopyMode("PriorMatchPage") },
		{ key = "PageDown", mods = "NONE", action = act.CopyMode("NextMatchPage") },
		{ key = "s", mods = "CTRL", action = act.CopyMode("ClearPattern") },
		{
			key = "Escape",
			mods = "NONE",
			action = act.Multiple({ act.CopyMode("Close"), "PopKeyTable" }),
		},
		{ key = "RightArrow", mods = "NONE", action = act.CopyMode("MoveRight") },
		{ key = "LeftArrow", mods = "NONE", action = act.CopyMode("MoveLeft") },
		{ key = "UpArrow", mods = "NONE", action = act.CopyMode("MoveUp") },
		{ key = "DownArrow", mods = "NONE", action = act.CopyMode("MoveDown") },
		{ key = "K", mods = "CTRL", action = act.ScrollByPage(-0.5) },
		{ key = "J", mods = "CTRL", action = act.ScrollByPage(1) },
		{ key = "k", mods = "CTRL", action = act.ScrollByLine(-1) },
		{ key = "j", mods = "CTRL", action = act.ScrollByLine(1) },
		{ key = "c", mods = "CTRL|SHIFT", action = act({ CopyTo = "ClipboardAndPrimarySelection" }) },
	},
}

config.mouse_bindings = {
	-- Scrolling up while holding CTRL increases the font size
	{
		event = { Down = { streak = 1, button = { WheelUp = 1 } } },
		mods = "CTRL",
		action = act.IncreaseFontSize,
	},

	-- Scrolling down while holding CTRL decreases the font size
	{
		event = { Down = { streak = 1, button = { WheelDown = 1 } } },
		mods = "CTRL",
		action = act.DecreaseFontSize,
	},
}

--------------------------------------
-- Local Functions
--------------------------------------
local tab_title = function(tab_info)
	local process_icons = {
		["btm"] = { { Text = "" } },
		["cargo"] = { { Text = "" } },
		["cmd.exe"] = { { Text = "" } },
		["docker"] = { { Text = "" } },
		["hx"] = { { Text = "" } },
		["node"] = { { Text = "" } },
		["nvim"] = { { Text = "" } },
		["nvim.exe"] = { { Text = "" } },
		["pnpm"] = { { Text = " " } },
		["pwsh.exe"] = { { Text = " " } },
		["v"] = { { Text = " " } },
		["vi"] = { { Text = " " } },
		["vim"] = { { Text = " " } },
		["yarn"] = { { Text = "" } },
		["zsh"] = { { Text = "" } },
	}
	local process_name = string.gsub(tab_info.active_pane.title, "(.*[/\\])(.*)", "%2")

	if not process_name then
		process_name = "zsh"
	end

	return term.format(process_icons[process_name] or { { Text = string.format("%s", process_name) } })
end

term.on("format-tab-title", function(tab)
	local title = tab_title(tab)
	title = " " .. title .. " "
	local tab_active = tab.is_active
	local icon = " " .. " "
	local icon_attr = { Intensity = "Bold" }
	local italized = { Italic = false }
	local active_fg = { Color = "#a6e3a1" }
	local tab_icon = " "
	if not tab_active then
		icon = string.format(" %s", tab.tab_index + 1)
		icon = ""
		icon_attr = { Intensity = "Half" }
		italized = { Italic = true }
		active_fg = { Color = "#f39ba8" }
	end

	return term.format({
		{ Attribute = icon_attr },
		{ Foreground = active_fg },
		{ Text = icon },
		"ResetAttributes",
		{ Foreground = active_fg },
		{ Attribute = italized },
		{ Text = title },
		"ResetAttributes",
		{ Attribute = { Italic = false } },
		{ Foreground = { Color = "#6c7086" } },
		{ Text = "" },
	})
end)

term.on("update-right-status", function(window, pane)
	local cells = {}

	local cwd_uri = pane:get_current_working_dir()
	if cwd_uri then
		cwd_uri = cwd_uri:sub(8)
		local slash = cwd_uri:find("/")
		local cwd = ""
		local hostname = ""
		if slash then
			hostname = cwd_uri:sub(1, slash - 1)
			-- Remove the domain name portion of the hostname
			local dot = hostname:find("[.]")
			if dot then
				hostname = hostname:sub(1, dot - 1)
			end
			-- and extract the cwd from the uri
			cwd = cwd_uri:sub(slash)
			-- table.insert(cells, cwd)
			if hostname == "" then
				table.insert(cells, "")
			elseif string.find(hostname, "arch") then
				table.insert(cells, "")
			else
				table.insert(cells, "")
			end
		end
	end

	local date = term.strftime("%a %b %d %H:%M:%S")
	table.insert(cells, date)
	local elements = {}
	local num_cells = 0

	-- Translate into elements
	function push(text, is_last)
		local cell_no = num_cells + 1
		table.insert(elements, { Foreground = { Color = "#89b4fa" } })
		table.insert(elements, { Text = " " .. text .. " " })
		if not is_last then
			table.insert(elements, { Foreground = { Color = "#6c7086" } })
			table.insert(elements, { Text = "" .. "" .. "" })
		end
		if is_last then
			table.insert(elements, { Foreground = { Color = "#6c7086" } })
			table.insert(elements, { Text = "" .. "" .. " " })
			table.insert(elements, { Foreground = { Color = "#89dceb" } })
			table.insert(elements, { Text = "󰗲   " })
			-- table.insert(elements, { Foreground = { Color = "#6c7086" } })
			-- table.insert(elements, { Text = " " .. "" .. " " })
		end
		num_cells = num_cells + 1
	end

	while #cells > 0 do
		local cell = table.remove(cells, 1)
		push(cell, #cells == 0)
	end
	window:set_right_status(term.format(elements))
end)

return config
-- 		rosewater = "#f5e0dc",
-- 		flamingo = "#f2cdcd",
-- 		pink = "#f5c2e7",
-- 		mauve = "#cba6f7",
-- 		red = "#f38ba8",
-- 		maroon = "#eba0ac",
-- 		peach = "#fab387",
-- 		yellow = "#f9e2af",
-- 		green = "#a6e3a1",
-- 		teal = "#94e2d5",
-- 		sky = "#89dceb",
-- 		sapphire = "#74c7ec",
-- 		blue = "#89b4fa",
-- 		lavender = "#b4befe",
-- 		text = "#cdd6f4",
-- 		subtext1 = "#bac2de",
-- 		subtext0 = "#a6adc8",
-- 		overlay2 = "#9399b2",
-- 		overlay1 = "#7f849c",
-- 		overlay0 = "#6c7086",
-- 		surface2 = "#585b70",
-- 		surface1 = "#45475a",
-- 		surface0 = "#313244",
-- 		base = "#1e1e2e",
-- 		mantle = "#181825",
-- 		crust = "#11111b",
