------------------------------------------------------
--               Wezterm configuration
------------------------------------------------------
local term = require("wezterm")
local act = term.action
local gui = term.gui
local mux = term.mux
-- Get ssh and wsl defaults
local wsl_domains = term.default_wsl_domains()
local ssh_domains = term.default_ssh_domains()
local launch_menu = {}
local config = {}

-- For windows host custom configuration
if term.target_triple == "x86_64-pc-windows-msvc" then
	-- config.win32_system_backdrop = "Acrylic"
	config.default_prog = { "C:\\Program Files\\PowerShell\\7\\pwsh.exe" }
	for _, domain in ipairs(wsl_domains) do
		domain.default_cwd = "~"
	end
end

-- For linux host custom configuration
if term.target_triple == "x86_64-unknown-linux-gnu" then
end

-- Load SSH Domains from ~/.ssh/config
for _, domain in ipairs(ssh_domains) do
	domain.assume_shell = "Posix"
end

--Startup settings
term.on("gui-startup", function(cmd)
	local tab, pane, window = term.mux.spawn_window(cmd or {})
	window:gui_window():set_inner_size(1300, 800)
	window:gui_window():set_position(400, 100)
	pane:split({ direction = "Bottom", size = 0.25 })
end)

term.on("mux-startup", function()
	local tab, pane, window = mux.spawn_window({})
	-- pane:split({ direction = "Bottom", size = 0.25 })
end)

---- Appearance
config.front_end = "OpenGL"

config.status_update_interval = 1000
config.color_scheme = "Catppuccin Mocha"

config.animation_fps = 240
config.max_fps = 240

-- config.initial_cols = 120
-- config.initial_rows = 30
config.font = term.font({
	family = "FiraCode Nerd Font",
	weight = "Regular",
	stretch = "Normal",
	style = "Normal",
	harfbuzz_features = { "calt=1", "clig=1", "liga=1" },
	-- scale = 1.0
})
config.font_size = 14
config.window_decorations = "RESIZE"
-- config.text_background_opacity = 0.3
-- config.window_background_opacity = 0.618
config.window_frame = {
	border_left_width = "0.25cell",
	border_right_width = "0.25cell",
	border_bottom_height = "0.125cell",
	border_top_height = "0.125cell",
	border_left_color = "#11111b",
	border_right_color = "#11111b",
	border_bottom_color = "#11111b",
	border_top_color = "#11111b",
	-- font_size = 15
}

-- config.default_cursor_style = "BlinkingBlock"
-- config.cursor_blink_rate = 333
config.inactive_pane_hsb = { saturation = 1.0, brightness = 0.5 }
config.window_padding = { left = 0, right = 0, top = 0, bottom = 0 }
config.colors = {
	background = "#11111b",
	tab_bar = {
		background = "#11111b",
		active_tab = {
			bg_color = "#313244",
			fg_color = "#cdd6f4",
			intensity = "Bold",
		},
	},
}
-- 		rosewater = "#f5e0dc",
-- 		flamingo = "#f2cdcd",
-- 		pink = "#f5c2e7",
-- 		mauve = "#cba6f7",
-- 		red = "#f38ba8",
-- 		maroon = "#eba0ac",
-- 		peach = "#fab387",
-- 		yellow = "#f9e2af",
-- 		green = "#a6e3a1",
-- 		teal = "#94e2d5",
-- 		sky = "#89dceb",
-- 		sapphire = "#74c7ec",
-- 		blue = "#89b4fa",
-- 		lavender = "#b4befe",
-- 		text = "#cdd6f4",
-- 		subtext1 = "#bac2de",
-- 		subtext0 = "#a6adc8",
-- 		overlay2 = "#9399b2",
-- 		overlay1 = "#7f849c",
-- 		overlay0 = "#6c7086",
-- 		surface2 = "#585b70",
-- 		surface1 = "#45475a",
-- 		surface0 = "#313244",
-- 		base = "#1e1e2e",
-- 		mantle = "#181825",
-- 		crust = "#11111b",

----- Misc
config.adjust_window_size_when_changing_font_size = false
config.audible_bell = "Disabled"
config.exit_behavior = "Close"
config.window_close_confirmation = "NeverPrompt"
config.scrollback_lines = 50000
config.tab_max_width = 9999
config.hide_tab_bar_if_only_one_tab = false
config.tab_bar_at_bottom = false
config.use_fancy_tab_bar = false
config.show_new_tab_button_in_tab_bar = false

config.disable_default_key_bindings = true
config.leader = { key = "a", mods = "CTRL", timeout_milliseconds = 1000 }

local fuzzy_commands = act.ShowLauncherArgs({ title = "  Fuzzy Commands", flags = "FUZZY|KEY_ASSIGNMENTS|COMMANDS" })
local fuzzy_domains = act.ShowLauncherArgs({ title = "  Find Domains", flags = "FUZZY|DOMAINS" })
local fuzzy_tabs = act.ShowLauncherArgs({ title = " Tabs", flags = "FUZZY|TABS|WORKSPACES" })
config.keys = {
	{ key = "F10", action = fuzzy_domains },
	{ key = "F11", action = act.ToggleFullScreen },
	{ key = "F12", action = fuzzy_commands },
	{ key = "F9", action = fuzzy_tabs },

	{ key = "r", mods = "LEADER", action = "ReloadConfiguration" },
	{ key = "i", mods = "LEADER", action = fuzzy_tabs },
	{ key = "o", mods = "LEADER", action = fuzzy_domains },
	{ key = "p", mods = "LEADER", action = fuzzy_commands },
	{ key = "n", mods = "LEADER", action = act.SwitchToWorkspace },
	{ key = "-", mods = "LEADER", action = act({ SplitVertical = { domain = "CurrentPaneDomain" } }) },
	{ key = "\\", mods = "LEADER", action = act({ SplitHorizontal = { domain = "CurrentPaneDomain" } }) },
	{ key = "z", mods = "LEADER", action = "TogglePaneZoomState" },
	{ key = "c", mods = "LEADER", action = act({ SpawnTab = "CurrentPaneDomain" }) },
	{ key = "x", mods = "LEADER", action = act.CloseCurrentPane({ confirm = false }) },
	{ key = "w", mods = "LEADER", action = act.CloseCurrentTab({ confirm = false }) },
	{ key = "0", mods = "LEADER", action = act.ResetFontAndWindowSize },
	{ key = "y", mods = "LEADER", action = "ActivateCopyMode" },
	{ key = "s", mods = "LEADER", action = act({ Search = { CaseInSensitiveString = "" } }) },
	{ key = "f", mods = "LEADER", action = "QuickSelect" },
	{ key = "q", mods = "LEADER", action = act.PaneSelect },
	{ key = "h", mods = "LEADER", action = act({ ActivatePaneDirection = "Left" }) },
	{ key = "j", mods = "LEADER", action = act({ ActivatePaneDirection = "Down" }) },
	{ key = "k", mods = "LEADER", action = act({ ActivatePaneDirection = "Up" }) },
	{ key = "l", mods = "LEADER", action = act({ ActivatePaneDirection = "Right" }) },

	{ key = ">", mods = "LEADER|SHIFT", action = act.SwitchWorkspaceRelative(0) },
	{ key = "<", mods = "LEADER|SHIFT", action = act.SwitchWorkspaceRelative(-2) },
	{ key = "H", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Left", 5 } }) },
	{ key = "J", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Down", 5 } }) },
	{ key = "K", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Up", 5 } }) },
	{ key = "L", mods = "LEADER|SHIFT", action = act({ AdjustPaneSize = { "Right", 5 } }) },

	{ key = "-", mods = "LEADER|CTRL", action = act.DecreaseFontSize },
	{ key = "=", mods = "LEADER|CTRL", action = act.IncreaseFontSize },
	{ key = "Tab", mods = "CTRL", action = act({ ActivateTabRelative = 1 }) },
	{ key = "1", mods = "ALT", action = act({ ActivateTab = 0 }) },
	{ key = "2", mods = "ALT", action = act({ ActivateTab = 1 }) },
	{ key = "3", mods = "ALT", action = act({ ActivateTab = 2 }) },
	{ key = "4", mods = "ALT", action = act({ ActivateTab = 3 }) },
	{ key = "5", mods = "ALT", action = act({ ActivateTab = 4 }) },
	{ key = "6", mods = "ALT", action = act({ ActivateTab = 5 }) },
	{ key = "7", mods = "ALT", action = act({ ActivateTab = 6 }) },
	{ key = "8", mods = "ALT", action = act({ ActivateTab = 7 }) },
	{ key = "9", mods = "ALT", action = act({ ActivateTab = 8 }) },
	{ key = "c", mods = "CTRL|SHIFT", action = act({ CopyTo = "ClipboardAndPrimarySelection" }) },
	{ key = "v", mods = "CTRL|SHIFT", action = act({ PasteFrom = "Clipboard" }) },
}

-- copy_mode
local copy_mode = gui.default_key_tables().copy_mode
table.insert(copy_mode, { key = "h", mods = "SHIFT", action = act.CopyMode("MoveToStartOfLineContent") })
table.insert(copy_mode, { key = "l", mods = "SHIFT", action = act.CopyMode("MoveToEndOfLineContent") })
table.insert(copy_mode, {
	key = "y",
	mods = "NONE",
	action = act.Multiple({ act.CopyTo("PrimarySelection"), act.ClearSelection, act.CopyMode("ClearSelectionMode") }),
})
-- search_mode
local search_mode = gui.default_key_tables().search_mode
table.insert(search_mode, { key = "c", mods = "CTRL", action = act.CopyMode("Close") })

-- copy_mode <=> search_mode
table.insert(copy_mode, { key = "i", mods = "NONE", action = act.Search({ CaseInSensitiveString = "" }) })
table.insert(search_mode, { key = "Enter", mods = "SHIFT", action = act.ActivateCopyMode })

config.key_tables = {
	copy_mode = copy_mode,
	search_mode = search_mode,
	super = {
		{ key = "`", mods = "CTRL", action = "PopKeyTable" },
		{ key = "Space", mods = "NONE", action = act.Search({ CaseInSensitiveString = "" }) },
		{ key = "n", mods = "CTRL", action = act.CopyMode("NextMatch") },
		{ key = "p", mods = "CTRL", action = act.CopyMode("PriorMatch") },
		{ key = "r", mods = "CTRL", action = act.CopyMode("CycleMatchType") },
		{ key = "PageUp", mods = "NONE", action = act.CopyMode("PriorMatchPage") },
		{ key = "PageDown", mods = "NONE", action = act.CopyMode("NextMatchPage") },
		{ key = "s", mods = "CTRL", action = act.CopyMode("ClearPattern") },
		{
			key = "Escape",
			mods = "NONE",
			action = act.Multiple({ act.CopyMode("Close"), "PopKeyTable" }),
		},
		{ key = "RightArrow", mods = "NONE", action = act.CopyMode("MoveRight") },
		{ key = "LeftArrow", mods = "NONE", action = act.CopyMode("MoveLeft") },
		{ key = "UpArrow", mods = "NONE", action = act.CopyMode("MoveUp") },
		{ key = "DownArrow", mods = "NONE", action = act.CopyMode("MoveDown") },
		{ key = "K", mods = "CTRL", action = act.ScrollByPage(-0.5) },
		{ key = "J", mods = "CTRL", action = act.ScrollByPage(1) },
		{ key = "k", mods = "CTRL", action = act.ScrollByLine(-1) },
		{ key = "j", mods = "CTRL", action = act.ScrollByLine(1) },
		{ key = "c", mods = "CTRL|SHIFT", action = act({ CopyTo = "ClipboardAndPrimarySelection" }) },
	},
}

config.mouse_bindings = {
	-- Scrolling up while holding CTRL increases the font size
	{
		event = { Down = { streak = 1, button = { WheelUp = 1 } } },
		mods = "CTRL",
		action = act.IncreaseFontSize,
	},

	-- Scrolling down while holding CTRL decreases the font size
	{
		event = { Down = { streak = 1, button = { WheelDown = 1 } } },
		mods = "CTRL",
		action = act.DecreaseFontSize,
	},
}

-- local get_host = function(tab)
-- 	local hostname = ""
-- 	local cwd_uri = tab.active_pane.current_working_dir
-- 	if cwd_uri then
-- 		cwd_uri = cwd_uri:sub(8)
-- 		local slash = cwd_uri:find("/")
-- 		local cwd = ""
-- 		if slash then
-- 			hostname = cwd_uri:sub(1, slash - 1)
-- 			local dot = hostname:find("[.]")
-- 			if dot then
-- 				hostname = hostname:sub(1, dot - 1)
-- 			end
-- 			cwd = cwd_uri:sub(slash)
-- 		end
-- 	end

-- 	if hostname == "" then
-- 		return "  "
-- 	else
-- 		return " "
-- 	end
-- end

-- term.on("update-right-status", function(window, pane)
-- 	local cells = {}
-- 	local workspace = window:active_workspace()
-- 	local cwd_uri = pane:get_current_working_dir()
-- 	-- table.insert(cells, "")
-- 	local name = window:active_key_table()
-- 	if name then
-- 		name = "MODE - " .. name
-- 	end
-- 	name = string.format("%s", name or "")
-- 	table.insert(cells, name)
-- 	if workspace then
-- 		if workspace == "default" then
-- 			-- table.insert(cells, " ")
-- 			table.insert(cells, "")
-- 		else
-- 			table.insert(cells, workspace)
-- 		end
-- 	end
--
-- 	if cwd_uri then
-- 		cwd_uri = cwd_uri:sub(8)
-- 		local slash = cwd_uri:find("/")
-- 		local cwd = ""
-- 		local hostname = ""
-- 		if slash then
-- 			hostname = cwd_uri:sub(1, slash - 1)
-- 			-- Remove the domain name portion of the hostname
-- 			local dot = hostname:find("[.]")
-- 			if dot then
-- 				hostname = hostname:sub(1, dot - 1)
-- 			end
-- 			-- and extract the cwd from the uri
-- 			cwd = cwd_uri:sub(slash)
--
-- 			table.insert(cells, cwd)
-- 			table.insert(cells, hostname)
-- 		end
-- 	end
-- 	-- I like my date/time in this style: "Wed Mar 3 08:14"
-- 	local date = wezterm.strftime("%a %b %-d %H:%M")
-- 	table.insert(cells, date)
-- 	-- The filled in variant of the < symbol
-- 	local ARROW = utf8.char(0xe0b2)
-- 	local FIRE = utf8.char(0xe0c2)
-- 	local SLASH = utf8.char(0xe0ba)
-- 	local colors = {
-- 		"#11111b",
-- 		"#11111b",
-- 		"#1e1e2e",
-- 		"#313244",
-- 		"#45475a",
-- 		"#6c7086",
-- 	}
-- 	local text_colors = {
-- 		"#f5c2e7",
-- 		"#cba6f7",
-- 		"#f38ba8",
-- 		"#eba0ac",
-- 		"#a6e3a1",
-- 		"#fab387",
-- 	}
-- 	-- The elements to be formatted
-- 	local elements = {}
-- 	-- How many cells have been formatted
-- 	local num_cells = 0
--
-- 	-- Translate a cell into elements
-- 	function push(text, is_last)
-- 		local cell_no = num_cells + 1
-- 		table.insert(elements, { Foreground = { Color = text_colors[cell_no] } })
-- 		table.insert(elements, { Background = { Color = colors[cell_no] } })
-- 		table.insert(elements, { Text = " " .. text .. " " })
-- 		if not is_last then
-- 			table.insert(elements, { Foreground = { Color = colors[cell_no + 1] } })
-- 			table.insert(elements, { Text = ARROW })
-- 		end
-- 		num_cells = num_cells + 1
-- 	end
--
-- 	while #cells > 0 do
-- 		local cell = table.remove(cells, 1)
-- 		push(cell, #cells == 0)
-- 	end
--
-- 	window:set_right_status(term.format(elements))
-- end)

-- term.on("format-tab-title", function(tab, tabs, panes, config, hover, max_width)
-- 	-- Not sure if it will slow down the performance, at least so far it's good
-- 	-- Is there a better way to get the tab or window cols ?
-- 	local mux_window = term.mux.get_window(tab.window_id)
-- 	local mux_tab = mux_window:active_tab()
-- 	local mux_tab_cols = mux_tab:get_size().cols
--
-- 	-- Calculate active/inactive tab cols
-- 	-- In general, active tab cols > inactive tab cols
-- 	local tab_count = #tabs
-- 	local inactive_tab_cols = math.floor(mux_tab_cols / tab_count)
-- 	local active_tab_cols = mux_tab_cols - (tab_count - 1) * inactive_tab_cols
--
-- 	local title = tab_title(tab)
-- 	title = " " .. title .. " "
-- 	local title_cols = term.column_width(title)
-- 	-- Divide into 3 areas and center the title
-- 	if tab.is_active then
-- 		local icon = " " .. " "
--
-- 		local rest_cols = math.max(active_tab_cols - title_cols, 0)
-- 		local right_cols = math.ceil(rest_cols / 2)
-- 		local left_cols = rest_cols - right_cols
-- 		return {
-- 			-- left
-- 			{ Foreground = { Color = "#a6e3a1" } },
-- 			{ Text = term.pad_right(icon, left_cols) },
-- 			-- center
-- 			{ Foreground = { Color = "#94e2d5" } },
-- 			{ Attribute = { Intensity = "Bold" } },
-- 			{ Text = title },
-- 			-- "ResetAttributes",
-- 			-- { Text = hostname },
-- 			-- right
-- 			{ Text = term.pad_right("", right_cols) },
-- 		}
-- 	else
-- 		local icon = " "
--
-- 		local rest_cols = math.max(inactive_tab_cols - title_cols, 0)
-- 		local right_cols = math.ceil(rest_cols / 2)
-- 		local left_cols = rest_cols - right_cols
-- 		return {
-- 			-- left
-- 			{ Text = term.pad_right(icon, left_cols) },
-- 			-- center
-- 			{ Text = title },
-- 			-- right
-- 			{ Text = term.pad_right("", right_cols) },
-- 		}
-- 	end
-- end)
--
--------------------------------------
-- Local Functions
--------------------------------------
local tab_title = function(tab_info)
	local process_icons = {
		["btm"] = { { Text = " " } },
		["cargo"] = { { Foreground = { Color = "#f38ba8" } }, { Text = " " } },
		["cmd.exe"] = { { Foreground = { Color = "#74c7ec" } }, { Text = " " } },
		["docker"] = { { Foreground = { Color = "#8caaee" } }, { Text = " " } },
		["hx"] = { { Foreground = { Color = "#a6e3a1" } }, { Text = " " } },
		["node"] = { { Foreground = { Color = "#a6e3a1" } }, { Text = "" } },
		["nvim"] = { { Foreground = { Color = "#a6e3a1" } }, { Text = " " } },
		["nvim.exe"] = { { Foreground = { Color = "#a6e3a1" } }, { Text = " " } },
		["pnpm"] = { { Foreground = { Color = "#a6e3a1" } }, { Text = " " } },
		["pwsh.exe"] = { { Foreground = { Color = "#74c7ec" } }, { Text = " Powershell" } },
		["v"] = { { Foreground = { Color = "#94e2d5" } }, { Text = " " } },
		["vi"] = { { Foreground = { Color = "#f38ba8" } }, { Text = " " } },
		["vim"] = { { Foreground = { Color = "#94e2d5" } }, { Text = " " } },
		["yarn"] = { { Foreground = { Color = "#8caaee" } }, { Text = "" } },
		["zsh"] = { { Foreground = { Color = "#f5e0dc" } }, { Text = " zsh" } },
	}
	local process_name = string.gsub(tab_info.active_pane.title, "(.*[/\\])(.*)", "%2")

	if not process_name then
		process_name = "zsh"
	end

	return term.format(
		process_icons[process_name]
			or { { Foreground = { Color = "#f5c2e7" } }, { Text = string.format("%s", process_name) } }
	)
end

term.on("format-tab-title", function(tab)
	local title = tab_title(tab)
	title = " " .. title .. " "
	local tab_active = tab.is_active
	local icon = " " .. " "

	if tab_active then
		icon = " " .. " "
	else
		icon = string.format(" %s", tab.tab_index + 1)
	end

	return term.format({
		{ Attribute = { Intensity = "Half" } },
		{ Foreground = { Color = "#a6e3a1" } },
		{ Text = icon },
		"ResetAttributes",
		-- { Text = " " },
		{ Text = title },
		{ Foreground = { Color = "#1e1e2e" } },
		{ Text = "▕" },
	})
end)

term.on("update-right-status", function(window, pane)
	local date = term.strftime("%a %b %d %H:%M:%S")

	window:set_right_status(term.format({
		{ Foreground = { Color = "#f38ba8" } },
		{ Text = date .. " " },
	}))
end)
return config
